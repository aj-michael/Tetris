Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var lowest = function (piece) {
      return $List.minimum($List.map(function (_v0) {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple2":
               return _v0._1 + piece.offsetY;}
            _U.badCase($moduleName,
            "on line 153, column 28 to 45");
         }();
      })(piece.blocks));
   };
   var coordinates = function (piece) {
      return $Set.fromList($List.map(function (_v4) {
         return function () {
            switch (_v4.ctor)
            {case "_Tuple2":
               return {ctor: "_Tuple2"
                      ,_0: _v4._0 + piece.offsetX
                      ,_1: _v4._1 + piece.offsetY};}
            _U.badCase($moduleName,
            "on line 147, column 29 to 60");
         }();
      })(piece.blocks));
   };
   var touching = F2(function (top,
   bottom) {
      return function () {
         var translated = $Set.map(function (_v8) {
            return function () {
               switch (_v8.ctor)
               {case "_Tuple2":
                  return {ctor: "_Tuple2"
                         ,_0: _v8._0
                         ,_1: _v8._1 - 1};}
               _U.badCase($moduleName,
               "on line 138, column 32 to 37");
            }();
         })(coordinates(top));
         return $Basics.not($List.isEmpty($Set.toList(A2($Set.intersect,
         translated,
         coordinates(bottom)))));
      }();
   });
   var piece5 = {_: {}
                ,blocks: _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: -1
                                       ,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 1}
                                      ,{ctor: "_Tuple2",_0: 1,_1: 1}])
                ,color: $Color.blue
                ,offsetX: 0
                ,offsetY: 0};
   var piece4 = {_: {}
                ,blocks: _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: -1
                                       ,_1: 1}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 1}
                                      ,{ctor: "_Tuple2",_0: 1,_1: 0}])
                ,color: $Color.orange
                ,offsetX: 0
                ,offsetY: 0};
   var piece3 = {_: {}
                ,blocks: _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: -1
                                       ,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 1}
                                      ,{ctor: "_Tuple2",_0: 1,_1: 0}])
                ,color: $Color.red
                ,offsetX: 0
                ,offsetY: 0};
   var piece2 = {_: {}
                ,blocks: _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: 0
                                       ,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 1}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 2}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 3}])
                ,color: $Color.blue
                ,offsetX: 0
                ,offsetY: 0};
   var piece1 = {_: {}
                ,blocks: _L.fromArray([{ctor: "_Tuple2"
                                       ,_0: 0
                                       ,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 0,_1: 1}
                                      ,{ctor: "_Tuple2",_0: 1,_1: 0}
                                      ,{ctor: "_Tuple2",_0: 1,_1: 1}])
                ,color: $Color.yellow
                ,offsetX: 0
                ,offsetY: 0};
   var indexedPiece = function (n) {
      return function () {
         switch (n)
         {case 1: return piece1;
            case 2: return piece2;
            case 3: return piece3;
            case 4: return piece4;
            case 5: return piece5;}
         _U.badCase($moduleName,
         "between lines 102 and 107");
      }();
   };
   var minX = -5;
   var maxX = 5;
   var dropHeight = 10;
   var getPiece = function (seed) {
      return function () {
         var $ = A2($Random.generate,
         A2($Random.$int,1,4),
         seed),
         index = $._0,
         seed$ = $._1;
         var piece = indexedPiece(index);
         return {ctor: "_Tuple2"
                ,_0: _U.replace([["offsetY"
                                 ,dropHeight]],
                piece)
                ,_1: seed$};
      }();
   };
   var initial = {ctor: "_Tuple3"
                 ,_0: _U.replace([["offsetY"
                                  ,dropHeight]],
                 piece3)
                 ,_1: _L.fromArray([])
                 ,_2: $Random.initialSeed(4)};
   var floor = -10;
   var finished = F2(function (piece,
   pieces) {
      return _U.eq(lowest(piece),
      floor) || A2($List.any,
      touching(piece),
      pieces);
   });
   var update = F2(function (s,
   _v13) {
      return function () {
         switch (_v13.ctor)
         {case "_Tuple3":
            return function () {
                 switch (s.ctor)
                 {case "Move":
                    return _U.eq(s._0.y,
                      0) ? {ctor: "_Tuple3"
                           ,_0: _U.replace([["offsetX"
                                            ,_v13._0.offsetX + s._0.x]],
                           _v13._0)
                           ,_1: _v13._1
                           ,_2: _v13._2} : {ctor: "_Tuple3"
                                           ,_0: _v13._0
                                           ,_1: _v13._1
                                           ,_2: _v13._2};
                    case "Timer":
                    return A2(finished,
                      _v13._0,
                      _v13._1) ? function () {
                         var $ = getPiece(_v13._2),
                         piece$ = $._0,
                         seed$ = $._1;
                         return {ctor: "_Tuple3"
                                ,_0: piece$
                                ,_1: A2($List._op["::"],
                                _v13._0,
                                _v13._1)
                                ,_2: seed$};
                      }() : {ctor: "_Tuple3"
                            ,_0: _U.replace([["offsetY"
                                             ,_v13._0.offsetY - 1]],
                            _v13._0)
                            ,_1: _v13._1
                            ,_2: _v13._2};}
                 _U.badCase($moduleName,
                 "between lines 111 and 121");
              }();}
         _U.badCase($moduleName,
         "between lines 111 and 121");
      }();
   });
   var blockSize = 20;
   var draw = F2(function (_v21,
   piece) {
      return function () {
         switch (_v21.ctor)
         {case "_Tuple2":
            return $Graphics$Collage.toForm(A2($Graphics$Collage.collage,
              _v21._0,
              _v21._1)(A2($List.map,
              function (_v25) {
                 return function () {
                    switch (_v25.ctor)
                    {case "_Tuple2":
                       return $Graphics$Collage.move({ctor: "_Tuple2"
                                                     ,_0: $Basics.toFloat(_v25._0 + piece.offsetX) * blockSize
                                                     ,_1: $Basics.toFloat(_v25._1 + piece.offsetY) * blockSize})($Graphics$Collage.filled(piece.color)($Graphics$Collage.square(blockSize)));}
                    _U.badCase($moduleName,
                    "between lines 186 and 188");
                 }();
              },
              piece.blocks)));}
         _U.badCase($moduleName,
         "between lines 185 and 191");
      }();
   });
   var render = F2(function (_v29,
   _v30) {
      return function () {
         switch (_v30.ctor)
         {case "_Tuple3":
            return function () {
                 switch (_v29.ctor)
                 {case "_Tuple2":
                    return function () {
                         var pieces = A2($List._op["::"],
                         _v30._0,
                         _v30._1);
                         var $ = {ctor: "_Tuple2"
                                 ,_0: $Basics.toFloat(_v29._0)
                                 ,_1: $Basics.toFloat(_v29._1)},
                         w = $._0,
                         h = $._1;
                         return A2($Graphics$Collage.collage,
                         _v29._0,
                         _v29._1)(A2($List.map,
                         draw({ctor: "_Tuple2"
                              ,_0: _v29._0
                              ,_1: _v29._1}),
                         pieces));
                      }();}
                 _U.badCase($moduleName,
                 "between lines 177 and 180");
              }();}
         _U.badCase($moduleName,
         "between lines 177 and 180");
      }();
   });
   var Piece = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,blocks: b
             ,color: a
             ,offsetX: c
             ,offsetY: d};
   });
   var Timer = function (a) {
      return {ctor: "Timer",_0: a};
   };
   var timer = A2($Signal.map,
   Timer,
   $Time.fps(5));
   var Move = function (a) {
      return {ctor: "Move",_0: a};
   };
   var arrows = A2($Signal.map,
   Move,
   $Keyboard.arrows);
   var input = A2($Signal.merge,
   arrows,
   timer);
   var state = A3($Signal.foldp,
   update,
   initial,
   input);
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   render,
   $Window.dimensions),
   state);
   _elm.Main.values = {_op: _op
                      ,Move: Move
                      ,Timer: Timer
                      ,Piece: Piece
                      ,blockSize: blockSize
                      ,floor: floor
                      ,dropHeight: dropHeight
                      ,maxX: maxX
                      ,minX: minX
                      ,piece1: piece1
                      ,piece2: piece2
                      ,piece3: piece3
                      ,piece4: piece4
                      ,piece5: piece5
                      ,indexedPiece: indexedPiece
                      ,update: update
                      ,finished: finished
                      ,getPiece: getPiece
                      ,touching: touching
                      ,coordinates: coordinates
                      ,lowest: lowest
                      ,state: state
                      ,initial: initial
                      ,input: input
                      ,arrows: arrows
                      ,timer: timer
                      ,render: render
                      ,draw: draw
                      ,main: main};
   return _elm.Main.values;
};